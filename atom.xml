<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Modern Android development for phones, tablets and wearables]]></title>
  <link href="http://android-dev.mobi/atom.xml" rel="self"/>
  <link href="http://android-dev.mobi/"/>
  <updated>2015-07-02T18:53:03+03:00</updated>
  <id>http://android-dev.mobi/</id>
  <author>
    <name><![CDATA[Jiggy Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[RushORM] How to Enable Debug Logging]]></title>
    <link href="http://android-dev.mobi/blog/2015/07/01/rushorm-how-to-enable-debug-logging/"/>
    <updated>2015-07-01T19:38:14+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/07/01/rushorm-how-to-enable-debug-logging</id>
    <content type="html"><![CDATA[<p>Using <a href="http://www.rushorm.com">RushORM</a> I’ve found that it is very hard to understand root cause of any database-related issues without internal debug logging, I mean at least all SQL queries should be printed into log (RushORM doesn’t enable debug logging by default).</p>

<p>But how to enable debug logging in RushORM? It’s not clear from the documentation, in fact, the documentation doesn’t say a word about this feature. Luckily, this feature exists!</p>

<p>Analyzing source code I found how to enable debug logging in RushORM: you simply need to add following flag to your <code>AndroidManifest.xml</code> file, under <code>&lt;application&gt;</code> section:</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">&quot;Rush_log&quot;</span> <span class="na">android:value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it! With this option enabled, RushORM will print all SQL queries he’s going to execute into Logcat. Very helpful for troubleshooting.</p>

<p>PS: <strong>@Stu_cams</strong>, you should add this flag into <em>Setup</em> section of documentation on RushORM website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Clean Code] Short Summary - Seven Ineffective Coding Habits of Many Programmers]]></title>
    <link href="http://android-dev.mobi/blog/2015/06/16/coding-habits-seven-ineffective-coding-habits-of-many-programmers-short-summary/"/>
    <updated>2015-06-16T13:04:44+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/06/16/coding-habits-seven-ineffective-coding-habits-of-many-programmers-short-summary</id>
    <content type="html"><![CDATA[<p>Recently I’ve stumbled upon to the interesting talk by Kevlin Henney: <a href="http://www.infoq.com/presentations/7-ineffective-coding-habits">Seven Ineffective Coding Habits of Many Programmers</a>.</p>

<p>The talk itself is very interesting, and I would agree with Kevlin on most of his points. Among other things, author talks about the efficiency of source code reading, clean code without much noise, signal-to-noise ratio, etc. Interestingly, talk itself took more than one hour, which could be interpreted as &ldquo;noisy&rdquo; itself :) In a modern world for many people it’s quite difficult to allocate more than 1 hour in a row to watch such presentation.</p>

<p>So, we’ve decided to write a short summary for the above talk, to help people to quickly go through the main points of the above talk.</p>

<!--more-->




<p><ol>
<li></p>

<h3>Noisy code</h3>

<p>Try to minimize the number of lines of “noise” in your code, try to make the code as simple and &ldquo;noiseless&rdquo; as possible. Keep in mind that your code will be read by humans, and they need to understand it easily. In a lot of noises, it&rsquo;s hard to find and identify real important code issues.<br/>
Do not write obvious comments. They only produce more noise to the code.
Examples of bad comments: <code>i = i + 1; /* Add one to i */</code> and <code>System.out.println(“Hello World!”); // display the string</code>
<blockquote><p>A common fallacy is to assume authors of incomprehensible code will somehow be able to express themselves lucidly and clearly in comments.</p><footer><strong>Kevlin Henney</strong> <cite><a href='https://twitter.com/KevlinHenney/status/381021802941906944'>twitter.com/KevlinHenney/status/&hellip;</a></cite></footer></blockquote>
</li></p>

<p><li></p>

<h3>Unsustainable Spacing</h3>

<p>Respect <strong>“80 column rule”</strong> - it’s not about screen sizes, it’s more about “ape vision”. It’s difficult for human eyes to read long lines of text. That’s why magazines, newspapers, modern websites are all using the limited width for a content. Your code should leverage that knowledge too.
An example of a good formatting, according to Kevlin:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">ResultType</span> <span class="nf">arbitraryMethodName</span><span class="o">(</span>
</span><span class='line'>    <span class="n">FirstArgumentType</span> <span class="n">firstArgument</span><span class="o">,</span>
</span><span class='line'>    <span class="n">SecondArgumentType</span> <span class="n">secondArgument</span><span class="o">,</span>
</span><span class='line'>    <span class="n">ThirdArgumentType</span> <span class="n">thirdArgument</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">LocalVariableType</span> <span class="n">localVariable</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">method</span><span class="o">(</span><span class="n">firstArgument</span><span class="o">,</span> <span class="n">secondArgument</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">localVariable</span><span class="o">.</span><span class="na">isSomething</span><span class="o">(</span>
</span><span class='line'>        <span class="n">thirdArgument</span><span class="o">,</span> <span class="n">SOME_SHOUTY_CONSTANT</span><span class="o">))</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">doSomething</span><span class="o">(</span><span class="n">localVariable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">localVariable</span><span class="o">.</span><span class="na">getSomething</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</li></p>

<p><li></p>

<h3>Lego Naming</h3>

<p>Choose moderate (not very short, but not too long) names for your classes, variables, methods, etc. Below you can find some of standard Java Exception classes and their alternative names for these classes (shorter and more clear), recommended by Kevlin:<br/>
<code>ClassNotFoundException</code> -> <strong><code>ClassNotFound</code></strong> <br/>
<code>ArithmeticException</code> -> <strong><code>IntegerDivisionByZero</code></strong> <br/>
<code>ArrayStoreException</code> -> <strong><code>IllegalArrayElementType</code></strong> <br/>
<code>ClassCastException</code> -> <strong><code>CastToNonSubclass</code></strong> <br/>
<code>InstantiationException</code> -> <strong><code>ClassCannotBeInstantiated</code></strong> <br/>
<code>NullPointerException</code> -> <strong><code>NullDereferenced</code></strong> <br/>
<code>SecurityException</code> -> <strong><code>SecurityViolation</code></strong>
</li></p>

<p><li></p>

<h3>￼ Underabstraction</h3>

<p><blockquote><p>Take your code base, stripout all of the string literals, stripout all of the comments, and then take your source code and put it in a tag cloud generator. And then see what it’s look like.</p><footer><strong>Kevlin Henney</strong> <cite><a href='http://www.infoq.com/presentations/7-ineffective-coding-habits'>Seven Ineffective Coding Habits of Many Programmers</a></cite></footer></blockquote>
Ask yourself a question “What is your system about?”.
Your codebase should represent your <strong>domain knowledge</strong>, not language syntax. More info: <a href="http://philcalcado.com/2009/04/29/tag-clouds-see-how-noisy-your-code-is/">http://philcalcado.com/2009/04/29/tag-clouds-see-how-noisy-your-code-is/</a> <br/>
A good example of under abstracted code:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// Initial code</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">portfolioIdsByTraderId</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">trader</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">portfolio</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">&hellip;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// Refactored code</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">trader</span><span class="o">.</span><span class="na">canView</span><span class="o">(</span><span class="n">portfolio</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">&hellip;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</li></p>

<p><li></p>

<h3>￼ Unencapsulated State</h3>

<p>Do no use <strong>Singletons</strong>, they are almost always bad.
<blockquote><p>￼Don&rsquo;t ever invite a vampire into your house, you silly boy. It renders you powerless.</p><footer><strong>The Lost boys</strong></footer></blockquote>
￼</li>
<li></p>

<h3>Getters and Setters</h3>

<p>“set” is NOT the opposite of “get”, the opposite is “reset” or “unset”. These two words has the most entries in English dictionary, so they are very ambiguous, try to limit the usage of above words in your code.
For example, instead of:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="kd">implements</span> <span class="o">&hellip;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getUnits</span><span class="o">()</span> <span class="o">&hellip;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHundredths</span><span class="o">()</span> <span class="o">&hellip;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Currency</span> <span class="nf">getCurrency</span><span class="o">()</span> <span class="o">&hellip;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUnits</span><span class="o">(</span><span class="kt">int</span> <span class="n">newUnits</span><span class="o">)</span> <span class="o">&hellip;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHundredths</span><span class="o">(</span><span class="kt">int</span> <span class="n">newHundredths</span><span class="o">)</span> <span class="o">&hellip;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCurrency</span><span class="o">(</span><span class="n">Currency</span> <span class="n">newCurrency</span><span class="o">)</span> <span class="o">&hellip;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
Write it like the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Money</span> <span class="kd">implements</span> <span class="o">&hellip;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getUnits</span><span class="o">()</span> <span class="o">&hellip;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHundredths</span><span class="o">()</span> <span class="o">&hellip;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Currency</span> <span class="nf">getCurrency</span><span class="o">()</span> <span class="o">&hellip;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</li></p>

<p><li></p>

<h3>Uncohesive Tests</h3>

<p><blockquote><p>￼Everybody knows that TDD stands for Test Driven Development. However, people too often concentrate on the words &ldquo;Test&rdquo; and &ldquo;Development&rdquo; and don&rsquo;t consider what the word <strong>&ldquo;Driven&rdquo;</strong> really implies. For tests to drive development they must do more than just test that code performs its required functionality: they must clearly express that required functionality to the reader. That is, they must be clear specifications of the required functionality. Tests that are not written with their role as specifications in mind can be very confusing to read.</p><footer><strong>Nat Pryce and Steve Freeman &ldquo;Are Your Tests Really Driving Your Development?&rdquo;</strong></footer></blockquote>
Do NOT test methods, <strong>test classes</strong>. A test case should be just that: it should correspond to a single case.</p>

<p>PS: I do recommend to watch the full talk because it contains much more information that presented in this short summary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RushORM] Using Predefined Database on Both Mobile and Wear Apps]]></title>
    <link href="http://android-dev.mobi/blog/2015/05/17/rushorm-using-predefined-database-on-both-mobile-and-wear-apps/"/>
    <updated>2015-05-17T16:31:37+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/05/17/rushorm-using-predefined-database-on-both-mobile-and-wear-apps</id>
    <content type="html"><![CDATA[<p>Problem statement:</p>

<blockquote><p>Assemble both mobile and wearable apps with the same RushORM database (.db file) with some predefined data in it, which will be absolutely the same for mobile and wear apps.</p></blockquote>

<p>While developing one of our apps, we were needed to ship both mobile and wear apps with the same set of “predefined” (pre-populated) data. However, a user should be able to modify this data, add new or delete existed.</p>

<p>Using Android’s Framework <code>res</code> folder seems like not an option because we can’t modify its content at runtime. Another idea is to upload that “predefined” data to some server, lets say in JSON format, download it during first app launch and store it in RushORM database using <code>RushCore.getInstance().deserialize(jsonString)</code> API. This may seems like a nice option, but it introduces few dependencies which we don’t want to have in our apps, like:</p>

<ul>
<li>Internet connection is required during first app start.</li>
<li>Downloading, parsing and storing data into database increase first startup time, therefore, worsens User Experience.</li>
<li>Some server is required, however, it could be simply Dropbox with publicly shared files.</li>
<li>Some script is required to upload generated files to a remote server, and also to download these files from a server to Android device.</li>
</ul>


<p>We didn’t want to have any of the above dependencies and drawbacks in our app, so we come up with another solution: <!--more--> <strong>generate database</strong> (<code>.db</code> file) with all <strong>predefined data</strong> preliminary and assemble both mobile and wearable apps with the same <code>.db</code> file. Similar feature existed in <a href="https://github.com/pardom/ActiveAndroid/wiki/Pre-populated-databases">ActiveAndroid ORM</a> framework and it’s called <strong>Pre-populated databases</strong>. However, <a href="http://www.rushorm.com/advanced.html">RushORM</a> doesn’t have such feature. So, we decided to implement that feature by ourselves.</p>

<p>There are 2 parts of the above task:</p>

<ul>
<li>Generate correct <code>.db</code> file in RushORM format with all data that we need in our apps initially.</li>
<li>Use that pre-populated <code>.db</code> file to initialize RushORM both on Mobile and Wear apps.</li>
</ul>


<p>To implement first part, we’ve created a separate module in our Android project called <code>db-generator</code>. It’s a separate mobile app, which is very simple - just initialize empty RushORM database and then run data generation process, which saves generated data (business objects in our case) into DB, synchronously, using methods like <code>RushCore.getInstance().save(List&lt;? extends Rush&gt; objects)</code>.
RushORM store files in <code>/data/data/&lt;yourAppID&gt;/databases/</code> directory. After the database was generated, we need to get it from rooted Android device or Android emulator where you were running <code>db-generator</code>. We can pull files using <code>adb pull</code> command. To make this process automated, we’ve created simple <code>Makefile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">THIS_FILE</span> <span class="o">:=</span> <span class="k">$(</span>lastword <span class="k">$(</span>MAKEFILE_LIST<span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">db</span><span class="o">:</span>
</span><span class='line'><span class="err">adb</span> <span class="err">uninstall</span> <span class="err">&lt;yourAppID&gt;</span>
</span><span class='line'><span class="nf">./gradlew db-generator</span><span class="o">:</span><span class="n">installDebug</span>
</span><span class='line'><span class="err">adb</span> <span class="err">shell</span> <span class="err">am</span> <span class="err">start</span> <span class="err">-n</span> <span class="err">&lt;yourAppID&gt;/.DBGeneratorActivity</span>
</span><span class='line'><span class="err">sleep</span> <span class="err">5</span>
</span><span class='line'><span class="err">adb</span> <span class="err">pull</span> <span class="err">/data/data/&lt;yourAppID&gt;/databases/predefined.db</span> <span class="err">./common/src/main/assets/predefined.db</span>
</span><span class='line'><span class="err">@echo</span> <span class="s2">&quot;\nBuild successful.\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we’re uninstalling our app first (to clear any previsouly stored data), then running standard Gradle task to install debug build of <code>db-generator</code> app, starting <code>DBGeneratorActivity</code> and waiting few seconds to allow data to be generated and stored into local storage. After that we’re pulling <code>.db</code> file using <code>adb pull</code> command (Note: this will only work on emulators or rooted devices) and storing it in our <code>common</code> module <code>assets</code> folder.</p>

<p>To implement second part, we need to copy <code>.db</code> file from <code>assets</code> folder to app sandbox folder (because files in <code>assets</code> folder are read-only) and only after that initialize RushORM. We need to do this only once, during app first launch. Here is the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">copyPredefinedDBIfNeeded</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">isProcessed</span> <span class="o">=</span> <span class="n">targetDBFile</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">PREDEFINED_DB_FILENAME</span><span class="o">).</span><span class="na">exists</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isProcessed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;Predefined DB is already processed, skipping&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">copyFile</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">PREDEFINED_DB_FILENAME</span><span class="o">);</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;Predefined DB files are copied&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;Can&#39;t copy predefined db file&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">File</span> <span class="nf">targetDBFile</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">getDatabasePath</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">copyFile</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">outFile</span> <span class="o">=</span> <span class="n">targetDBFile</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">in</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getAssets</span><span class="o">().</span><span class="na">open</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="n">FileUtils</span><span class="o">.</span><span class="na">copyInputStreamToFile</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">outFile</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">in</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//noinspection EmptyCatchBlock</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that is done, we can initialize RushORM with <code>predefined.db</code> file.</p>

<p>PS: Theoretically, it could be possible to run <code>db-generator</code> on a desktop, but we didn’t try this approach. If you have some information about launching RushORM on a desktop, please share it with us in comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Wear] Avoid System Timeout to Close the Activity]]></title>
    <link href="http://android-dev.mobi/blog/2015/05/06/wear-avoid-system-timeout-to-close-the-activity/"/>
    <updated>2015-05-06T12:57:34+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/05/06/wear-avoid-system-timeout-to-close-the-activity</id>
    <content type="html"><![CDATA[<p>Interestingly, by default Android Wear close the application activity after 30 seconds of idle.
It means that Google wants Wear apps be “lightweight” -  designed to work in short-time interaction with user.</p>

<p>But still Android is Android :) Here you can avoid almost everything.</p>

<p>Just add <code>android:keepScreenOn="true"</code> to your activities root view XML and timeout will be dismissed.</p>

<p>Alternatively, you can <a href="https://developer.android.com/training/scheduling/wakelock.html#screen">set same flag at runtime from Java code</a>
like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">getWindow</span><span class="o">().</span><span class="na">addFlags</span><span class="o">(</span><span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_KEEP_SCREEN_ON</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Do not abuse this option, because it may drain wearable device’s battery!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Realm] First Look Into Brand New Mobile Persistent Storage]]></title>
    <link href="http://android-dev.mobi/blog/2015/04/30/realm-first-look-into-brand-new-mobile-persistent-storage/"/>
    <updated>2015-04-30T17:32:55+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/04/30/realm-first-look-into-brand-new-mobile-persistent-storage</id>
    <content type="html"><![CDATA[<p>Starting new project we spent some time investigating new approaches for data persistent storage on Android Platform.</p>

<p>One of the newest and the most promising library everybody is talking about is <a href="http://realm.io">Realm</a>.
This is noSQL, non-relational storage written on C++ for Android and iOS platforms which promise very handy and fast object-oriented access to local storage.</p>

<p>What can be better that writing something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">realm</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="na">createObject</span><span class="o">(</span><span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// Create a new object</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">&quot;john@corporation.com&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">realm</span><span class="o">.</span><span class="na">commitTransaction</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>and store your business object into storage without any mapping, SQL, and other complicated and potentially slow operations inside?</p>

<p>The first impression was - “wow, it’s awesome!”.
It’s easy to integrate, pretty good documentation available, also samples, videos, community.</p>

<p>But deeper dive showed shocking drawbacks: <!--more--></p>

<ul>
<li>you can store only “absolutely pure realm objects”, which means no inheritance from other class, no hierarchy  of your business classes, even no other methods except getters and setters are allowed.</li>
<li>you can’t override methods like <code>toString()</code> and <code>equals()</code></li>
<li>you can access your data fields only by getters and/or setters which makes impossible to serialize data objects to JSON by vell known libraries like <a href="https://code.google.com/p/google-gson/">GSON</a> cause they uses direct field access for it, instead of getters/setters.</li>
<li>no built-in mechanism to export/import data using JSON, only import functionality available (<a href="http://realm.io/docs/java/latest/#json">http://realm.io/docs/java/latest/#json</a>), but it’s absolutely unclear how to import objects with many-to-many relationship to each other.</li>
</ul>


<p>It’s too much for us. As we need to export/import data from local storage intensively this solution is unacceptable for us.</p>

<p>We will keep our eyes on Realm project progress, but now we&rsquo;re going to try other solutions.</p>
]]></content>
  </entry>
  
</feed>
