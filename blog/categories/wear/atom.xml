<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wear | Modern Android development for phones, tablets and wearables]]></title>
  <link href="http://android-dev.mobi/blog/categories/wear/atom.xml" rel="self"/>
  <link href="http://android-dev.mobi/"/>
  <updated>2015-05-26T13:05:24+03:00</updated>
  <id>http://android-dev.mobi/</id>
  <author>
    <name><![CDATA[Android-Dev.mobi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[RushORM] Using Predefined Database on Both Mobile and Wear Apps]]></title>
    <link href="http://android-dev.mobi/blog/2015/05/17/rushorm-using-predefined-database-on-both-mobile-and-wear-apps/"/>
    <updated>2015-05-17T16:31:37+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/05/17/rushorm-using-predefined-database-on-both-mobile-and-wear-apps</id>
    <content type="html"><![CDATA[<p>Problem statement:</p>

<blockquote><p>Assemble both mobile and wearable apps with the same RushORM database (.db file) with some predefined data in it, which will be absolutely the same for mobile and wear apps.</p></blockquote>

<p>While developing one of our apps, we were needed to ship both mobile and wear apps with the same set of “predefined” (pre-populated) data. However, user should be able to modify this data, add new or delete existed.</p>

<p>Using Android’s Framework <code>res</code> folder seems like not an option, because we can’t modify it’s content at runtime. Another idea is to upload that “predefined” data to some server, lets say in JSON format, download it during first app launch and store it in RushORM database using <code>RushCore.getInstance().deserialize(jsonString)</code> API. This may seems like a nice option, but it introduces few dependencies which we don’t want to have in our apps, like:</p>

<ul>
<li>Internet connection is required during first app start.</li>
<li>Downloading, parsing and storing data into database increase first startup time, therefore worsens user experience.</li>
<li>Some server is required, however it could be simply Dropbox with publicly shared files.</li>
<li>Some script is required to upload generated files to remote server, and also to download these files from server to Android device.</li>
</ul>


<p>We didn’t want to have any of the above dependencies and drawbacks in our app, so we come up with another solution: <!--more--> <strong>generate database</strong> (<code>.db</code> file) with all <strong>predefined data</strong> preliminary and assemble both mobile and wearable apps with the same <code>.db</code> file. Similar feature existed in <a href="https://github.com/pardom/ActiveAndroid/wiki/Pre-populated-databases">ActiveAndroid ORM</a> framework and it’s called <strong>Pre-populated databases</strong>. However, <a href="http://www.rushorm.com/advanced.html">RushORM</a> doesn’t have such feature. So, we decided to implement that feature by ourselves.</p>

<p>There are 2 parts of the above task:</p>

<ul>
<li>Generate correct <code>.db</code> file in RushORM format with all data that we need in our apps initially.</li>
<li>Use that pre-populated <code>.db</code> file to initialize RushORM both on Mobile and Wear apps.</li>
</ul>


<p>To implement first part, we’ve created separate module in our Android project called <code>db-generator</code>. It’s a separate mobile app, which is very simple - just initialize empty RushORM database and then run data generation process, which saves generated data (business objects in our case) into DB, synchronously, using methods like <code>RushCore.getInstance().save(List&lt;? extends Rush&gt; objects)</code>.
RushORM store files in <code>/data/data/&lt;yourAppID&gt;/databases/</code> directory. After database was generated, we need to get it from rooted Android device or Android emulator where you were running <code>db-generator</code>. We can pull files using <code>adb pull</code> command. To make this process automated, we’ve created simple <code>Makefile</code>:</p>

<pre><code class="make">THIS_FILE := $(lastword $(MAKEFILE_LIST))

db:
adb uninstall &lt;yourAppID&gt;
./gradlew db-generator:installDebug
adb shell am start -n &lt;yourAppID&gt;/.DBGeneratorActivity
sleep 5
adb pull /data/data/&lt;yourAppID&gt;/databases/predefined.db ./common/src/main/assets/predefined.db
@echo "\nBuild successful.\n"
</code></pre>

<p>Here we’re uninstalling our app first (to clear any previsouly stored data), then running standard Gradle task to install debug build of <code>db-generator</code> app, starting <code>DBGeneratorActivity</code> and waiting few seconds to allow data to be generated and stored into local storage. After that we’re pulling <code>.db</code> file using <code>adb pull</code> command (Note: this will only work on emulators or rooted devices) and storing it in our <code>common</code> module <code>assets</code> folder.</p>

<p>To implement second part, we need to copy <code>.db</code> file from <code>assets</code> folder to app sandbox folder (because files in <code>assets</code> folder are read-only) and only after that initialize RushORM. We need to do this only once, during app first launch. Here is the code:</p>

<pre><code class="Java">public static void copyPredefinedDBIfNeeded(Context context) {
    boolean isProcessed = targetDBFile(context, PREDEFINED_DB_FILENAME).exists();
    if (isProcessed) {
        LOG.i("Predefined DB is already processed, skipping");
        return;
    }
    try {
        copyFile(context, PREDEFINED_DB_FILENAME);
        LOG.i("Predefined DB files are copied");
    } catch (IOException e) {
        LOG.e("Can't copy predefined db file", e);
    }
}

private static File targetDBFile(Context context, String name) {
    return context.getDatabasePath(name);
}

private static void copyFile(Context context, String name) throws IOException {
    InputStream in = null;
    File outFile = targetDBFile(context, name);
    try {
        in = context.getAssets().open(name);
        FileUtils.copyInputStreamToFile(in, outFile);
    } finally {
        if (in != null) {
            //noinspection EmptyCatchBlock
            try {
                in.close();
            } catch (IOException e) {
            }
        }
    }
}
</code></pre>

<p>After that is done, we can initialize RushORM with <code>predefined.db</code> file.</p>

<p>PS: Theoretically, it could be possible to run <code>db-generator</code> on desktop, but we didn’t try this approach. If you have some information about launching RushORM on desktop, please share it with us in comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Wear] Avoid System Timeout to Close the Activity]]></title>
    <link href="http://android-dev.mobi/blog/2015/05/06/wear-avoid-system-timeout-to-close-the-activity/"/>
    <updated>2015-05-06T12:57:34+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/05/06/wear-avoid-system-timeout-to-close-the-activity</id>
    <content type="html"><![CDATA[<p>Interestingly, by default Android Wear close the application activity after 30 seconds of idle.
It means that Google wants Wear apps be “lightweight” -  designed to work in short-time interaction with user.</p>

<p>But still Android is Android :) Here you can avoid almost everything.</p>

<p>Just add <code>android:keepScreenOn="true"</code> to your activities root view XML and timeout will be dismissed.</p>

<p>Alternatively, you can <a href="https://developer.android.com/training/scheduling/wakelock.html#screen">set same flag at runtime from Java code</a>
like:</p>

<pre><code class="Java">public class MainActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    }
</code></pre>

<p><strong>Do not abuse this option, because it may drain battery of users wearables!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Realm] First Look Into Brand New Mobile Persistant Storage]]></title>
    <link href="http://android-dev.mobi/blog/2015/04/30/realm-first-look-into-brand-new-mobile-persistant-storage/"/>
    <updated>2015-04-30T17:32:55+03:00</updated>
    <id>http://android-dev.mobi/blog/2015/04/30/realm-first-look-into-brand-new-mobile-persistant-storage</id>
    <content type="html"><![CDATA[<p>Starting new project we spent some time investigating new approaches for data persistant storage on Android Platform.</p>

<p>One of the newest and the most promising library everybody is talking about is <a href="http://realm.io">Realm</a>.
This is noSQL, non-relational storage written on C++ for Android and iOS platforms which promise very handy and fast object-oriented access to local storage.</p>

<p>What can be better that writing something like:</p>

<pre><code class="Java">realm.beginTransaction();
User user = realm.createObject(User.class); // Create a new object
user.setName("John");
user.setEmail("john@corporation.com");
realm.commitTransaction();
</code></pre>

<p>and store your business object into storage without any mapping, SQL, and other complicated and potentially slow operations inside?</p>

<p>The first impression was - “wow, it’s awesome!”.
It’s easy to integrate, pretty good documentation available, also samples, videos, community.</p>

<p>But deeper dive showed shocking drawbacks: <!--more--></p>

<ul>
<li>you can store only “absolutely pure realm objects”, which means no inheritance from other class, no hierarchy  of your business classes, even no other methods except getters and setters are allowed.</li>
<li>you can’t override methods like <code>toString()</code> and <code>equals()</code></li>
<li>you can access your data fields only by getters and/or setters which makes impossible to serialize data objects to JSON by vell known libraries like <a href="https://code.google.com/p/google-gson/">GSON</a> cause they uses direct field access for it, instead of getters/setters.</li>
<li>no built-in mechanism to export/import data using JSON, only import functionality available (<a href="http://realm.io/docs/java/latest/#json">http://realm.io/docs/java/latest/#json</a>), but it’s absolutely unclear how to import objects with many-to-many relationship to each other.</li>
</ul>


<p>It’s too much for us. As we need to export/import data from local storage intensively this solution is unacceptable for us.</p>

<p>We will keep our eyes on Realm project progress, but now we&rsquo;re going to try other solutions.</p>
]]></content>
  </entry>
  
</feed>
